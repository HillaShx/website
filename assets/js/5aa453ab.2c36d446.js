"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2518],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||l;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[u]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<l;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6652:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const l={sidebar_position:3,title:"Include and Exclude rules"},r=void 0,o={unversionedId:"configuration/include-and-exclude",id:"configuration/include-and-exclude",title:"Include and Exclude rules",description:"In the App-specific configurations section, we discussed",source:"@site/docs/configuration/include-and-exclude.md",sourceDirName:"configuration",slug:"/configuration/include-and-exclude",permalink:"/docs/configuration/include-and-exclude",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration/include-and-exclude.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Include and Exclude rules"},sidebar:"tutorialSidebar",previous:{title:"App-specific configurations",permalink:"/docs/configuration/app-specific-configurations"},next:{title:"Options",permalink:"/docs/configuration/options"}},c={},s=[{value:"Typical use-case for <code>include</code> rules",id:"typical-use-case-for-include-rules",level:3},{value:"Excluding a package",id:"excluding-a-package",level:3},{value:"Difference between <code>includes</code> and <code>extra_includes</code>",id:"difference-between-includes-and-extra_includes",level:3}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"../app-specific-configurations"},"App-specific configurations")," section, we discussed\na way to create configurations that change depending on the active application.\nThese configurations let you tune the way Cocmd interacts with specific applications\nby providing a series of parameters."),(0,i.kt)("p",null,"Among them you'll find the ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"exclude")," rules,\ntwo sets of parameters that let you customize which matches and packages should be used\nfor a given configuration."),(0,i.kt)("p",null,"A typical use-case would be to create a set of email templates and ",(0,i.kt)("strong",{parentName:"p"},"only enable them\ninside your email client"),", or defining some code-snippets and only enable\nthem inside your IDEs and Text Editors of choice. "),(0,i.kt)("p",null,"You might also want to ",(0,i.kt)("strong",{parentName:"p"},"disable\na package inside a specific application"),", for example disabling emojis when\nusing Slack, which already comes with emojis."),(0,i.kt)("p",null,"These use-cases are solved by the ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"exclude")," rules."),(0,i.kt)("h3",{id:"typical-use-case-for-include-rules"},"Typical use-case for ",(0,i.kt)("inlineCode",{parentName:"h3"},"include")," rules"),(0,i.kt)("p",null,"Let's start with a simple example. We want to create a set of email replies\nand only enable when when inside Chrome or Firefox."),(0,i.kt)("p",null,"We start by defining the snippets inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"match/_email.yml")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/match/_email.yml"',title:'"$CONFIG/match/_email.yml"'},'matches:\n  - trigger: ":contact"\n    replace: |\n      Hi,\n      Thank you for contacting us!\n      Best regards,\n      The Support Team\n')),(0,i.kt)("admonition",{title:"Make sure to include the underscore!",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"In the previous example, we prefixed the filename with an ",(0,i.kt)("inlineCode",{parentName:"p"},"_")," underscore.\nAs explained in the ",(0,i.kt)("a",{parentName:"p",href:"../../matches/organizing-matches"},"Organizing matches"),"\nsection, Cocmd automatically loads all YAML files located in the ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," directory,\n",(0,i.kt)("strong",{parentName:"p"},"except the ones starting with an ",(0,i.kt)("inlineCode",{parentName:"strong"},"_")," underscore.")),(0,i.kt)("p",{parentName:"admonition"},"Therefore, we prefix the ",(0,i.kt)("inlineCode",{parentName:"p"},"_email.yml")," filename with an underscore to\nprevent Cocmd from loading that YAML file automatically.\nIf we hadn't done so, Cocmd would enable the ",(0,i.kt)("inlineCode",{parentName:"p"},"email.yml")," file for\nall applications. Instead, we want to enable it only on Chrome and Firefox.")),(0,i.kt)("p",null,"At this point, we can create an app-specific configuration for Chrome:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/chrome.yml"',title:'"$CONFIG/config/chrome.yml"'},'filter_exec: "chrome"\n\nextra_includes:\n  - "../match/_email.yml"\n')),(0,i.kt)("p",null,"Let's discuss it step-by-step:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Firstly, we specify the ",(0,i.kt)("inlineCode",{parentName:"li"},"filter_exec")," option to enable this configuration ",(0,i.kt)("strong",{parentName:"li"},"only")," when using\nChrome. Note that this filter might not be working on your platform, check out\nthe ",(0,i.kt)("a",{parentName:"li",href:"../app-specific-configurations"},"App-specific configurations")," section for more information\nand instructions on finding the right filter."),(0,i.kt)("li",{parentName:"ol"},"Then, we specify the ",(0,i.kt)("inlineCode",{parentName:"li"},"extra_includes")," rule, passing the relative path to the\nsnippet file we defined earlier.")),(0,i.kt)("p",null,"The previous configuration should be interpreted as:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"Also")," include the snippets defined in the ",(0,i.kt)("inlineCode",{parentName:"em"},"match/_email.yml")," file when using Chrome"),".")),(0,i.kt)("p",null,"Then, we can do the same for Firefox:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/firefox.yml"',title:'"$CONFIG/config/firefox.yml"'},'filter_exec: "firefox"\n\nextra_includes:\n  - "../match/_email.yml"\n')),(0,i.kt)("p",null,"At this point, we'll have the ",(0,i.kt)("inlineCode",{parentName:"p"},":contact")," snippet ready to be used on Chrome and Firefox!"),(0,i.kt)("admonition",{title:"Be careful with those filters",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"In the previous examples, we used some filters to detect Chrome and Firefox.\nThese have only been tested on Windows, and might not be working on other platforms.\nMake sure to read the ",(0,i.kt)("a",{parentName:"p",href:"../app-specific-configurations/#finding-the-right-filters"},"Finding the right filters"),"\nsection to find suitable ones.")),(0,i.kt)("h3",{id:"excluding-a-package"},"Excluding a package"),(0,i.kt)("p",null,"Another common use-case is to disable a package when using a specific application.\nFor example, let's say we want to disable the ",(0,i.kt)("inlineCode",{parentName:"p"},"all-emojis")," package when using Telegram."),(0,i.kt)("p",null,"You can create an app-specific configuration ",(0,i.kt)("inlineCode",{parentName:"p"},"config/telegram.yml")," as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/telegram.yml"',title:'"$CONFIG/config/telegram.yml"'},'filter_exec: Telegram\n\nextra_excludes:\n  - "../match/packages/all-emojis/*"\n')),(0,i.kt)("p",null,"In this example, we defined the ",(0,i.kt)("inlineCode",{parentName:"p"},"extra_excludes")," rule, specifying a glob pattern for the ",(0,i.kt)("inlineCode",{parentName:"p"},"all-emojis")," package.\nWith this rule, Cocmd will ",(0,i.kt)("strong",{parentName:"p"},"exclude all files defined inside the ",(0,i.kt)("inlineCode",{parentName:"strong"},"all-emojis")," package when using Telegram.")),(0,i.kt)("p",null,"Keep in mind that you are not limited to packages, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"excludes")," rules with all match files:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/telegram.yml"',title:'"$CONFIG/config/telegram.yml"'},'filter_exec: Telegram\n\nextra_excludes:\n  - "../match/code_snippets.yml"\n')),(0,i.kt)("h3",{id:"difference-between-includes-and-extra_includes"},"Difference between ",(0,i.kt)("inlineCode",{parentName:"h3"},"includes")," and ",(0,i.kt)("inlineCode",{parentName:"h3"},"extra_includes")),(0,i.kt)("p",null,"In the previous examples, we used the so-called ",(0,i.kt)("em",{parentName:"p"},"extra")," rules, which are used to ",(0,i.kt)("strong",{parentName:"p"},"extend")," the\nbuilt-in include and exclude definitions. For example, specifying the following ",(0,i.kt)("inlineCode",{parentName:"p"},"extra_includes")," rule:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'extra_includes:\n  - "../match/_custom.yml"\n')),(0,i.kt)("p",null,"will cause this configuration to ",(0,i.kt)("em",{parentName:"p"},"extend")," the default include rules, resulting in the following includes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"../match/**/[!_]*.yml\n../match/_custom.yml\n")),(0,i.kt)("p",null,"In other words, by specifying ",(0,i.kt)("inlineCode",{parentName:"p"},"extra_includes")," you extend the default includes (",(0,i.kt)("inlineCode",{parentName:"p"},"../match/**/[!_]*.yml"),")."),(0,i.kt)("p",null,"For many use-cases, this behavior is desirable, but there are times when you might want to redefine\nincludes without extending them. To do that, you'll need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"includes")," rule instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"extra_includes"),"."),(0,i.kt)("p",null,"For example, the following app-specific configuration will only load the ",(0,i.kt)("inlineCode",{parentName:"p"},"match/jokes.yml")," snippets\nwhen using Telegram, ",(0,i.kt)("strong",{parentName:"p"},"ignoring the default definitions"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/telegram.yml"',title:'"$CONFIG/config/telegram.yml"'},'filter_exec: Telegram\n\nincludes:\n  - "../match/jokes.yml"\n')),(0,i.kt)("p",null,"The same considerations apply to the ",(0,i.kt)("inlineCode",{parentName:"p"},"excludes")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"extra_excludes")," rules as well."))}d.isMDXComponent=!0}}]);