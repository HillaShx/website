"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1692],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=p(n),k=i,c=s["".concat(d,".").concat(k)]||s[k]||u[k]||r;return n?a.createElement(c,l(l({ref:t},m),{},{components:n})):a.createElement(c,l({ref:t},m))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[s]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:4,title:"Options"},l=void 0,o={unversionedId:"configuration/options",id:"configuration/options",title:"Options",description:"In this guide, we are going to discuss the available options to customize Cocmd.",source:"@site/docs/configuration/options.md",sourceDirName:"configuration",slug:"/configuration/options",permalink:"/docs/configuration/options",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration/options.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Options"},sidebar:"tutorialSidebar",previous:{title:"Include and Exclude rules",permalink:"/docs/configuration/include-and-exclude"},next:{title:"Internals",permalink:"/docs/category/internals"}},d={},p=[{value:"Customizing the Toggle Key",id:"customizing-the-toggle-key",level:2},{value:"Customizing the Search bar",id:"customizing-the-search-bar",level:2},{value:"Customizing the search shortcut",id:"customizing-the-search-shortcut",level:3},{value:"Customizing the search trigger",id:"customizing-the-search-trigger",level:3},{value:"Hiding the Icon",id:"hiding-the-icon",level:2},{value:"Hiding the Notifications",id:"hiding-the-notifications",level:2},{value:"Options reference",id:"options-reference",level:2}],m={toc:p},s="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In this guide, we are going to discuss the available options to customize Cocmd.\nThe first few sections are about the common parameters you might want to change,\nbut you'll also find a complete reference at the bottom for the advanced ones."),(0,i.kt)("h2",{id:"customizing-the-toggle-key"},"Customizing the Toggle Key"),(0,i.kt)("p",null,"If you often need to ",(0,i.kt)("strong",{parentName:"p"},"quickly enable and disable Cocmd")," during regular use, you might want to customize\nthe ",(0,i.kt)("em",{parentName:"p"},"Toggle Key"),".\nWhen double pressed, the Toggle Key disables Cocmd, preventing any expansion.\nDouble-pressing Alt again will re-enable it. "),(0,i.kt)("admonition",{title:"Changes in version 2.1.2",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Prior to version 2.1.2, Cocmd was configured to use the ALT key as ",(0,i.kt)("inlineCode",{parentName:"p"},"toggle_key")," by default.\nThat was a major source of confusion, as many users accidentally pressed it during\nnormal use.\nFor this reason, Cocmd now ships with the ",(0,i.kt)("inlineCode",{parentName:"p"},"toggle_key")," ",(0,i.kt)("em",{parentName:"p"},"disabled")," by default.")),(0,i.kt)("p",null,"If you'd like to customize the key, simply add the ",(0,i.kt)("inlineCode",{parentName:"p"},"toggle_key")," parameter to your\n",(0,i.kt)("inlineCode",{parentName:"p"},"$CONFIG/config/default.yml")," configuration and set it to one of the available options:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null}),(0,i.kt)("th",{parentName:"tr",align:null}))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"CTRL")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ALT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"SHIFT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"META")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"OFF"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LEFT_CTRL")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LEFT_ALT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LEFT_SHIFT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LEFT_META")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"RIGHT_CTRL")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"RIGHT_ALT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"RIGHT_SHIFT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"RIGHT_META")),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("p",null,"For example, if you want to use the Right Control key to toggle Cocmd, you can add the\nfollowing to your configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/default.yml"',title:'"$CONFIG/config/default.yml"'},"toggle_key: RIGHT_CTRL\n")),(0,i.kt)("admonition",{title:"About the META key",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"META")," option refers to different keys depending on the platform.\nFor example, on macOS the ",(0,i.kt)("inlineCode",{parentName:"p"},"META"),' refers to Command (or CMD),\nwhile on Windows refers to the "Win" key.'),(0,i.kt)("p",{parentName:"admonition"},"In other words, if you'd like to use the CMD key on macOS, you should\nspecify ",(0,i.kt)("inlineCode",{parentName:"p"},"META"),".")),(0,i.kt)("p",null,"And if you'd rather turn it off, you can do so with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml",metastring:'title="$CONFIG/config/default.yml"',title:'"$CONFIG/config/default.yml"'},"toggle_key: OFF\n")),(0,i.kt)("h2",{id:"customizing-the-search-bar"},"Customizing the Search bar"),(0,i.kt)("p",null,"The Search bar is one of the most useful features, letting you choose the right snippet\nwithout having to remember the trigger."),(0,i.kt)("p",null,"By default, the search bar can be opened in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"By pressing ALT+Space (Option + Space on macOS)"),(0,i.kt)("li",{parentName:"ul"},'By clicking on the status icon and then selecting "Open Search bar" (currently not available on Linux)')),(0,i.kt)("p",null,"If for whatever reason you don't like the default shortcuts, you can customize them as follows:"),(0,i.kt)("h3",{id:"customizing-the-search-shortcut"},"Customizing the search shortcut"),(0,i.kt)("p",null,"If you don't like the default Alt+Space shortcut, you can change it by adding the following line\nto your ",(0,i.kt)("inlineCode",{parentName:"p"},"$CONFIG/config/default.yml")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/default.yml"',title:'"$CONFIG/config/default.yml"'},"search_shortcut: ALT+SHIFT+SPACE\n")),(0,i.kt)("p",null,"As you can see, the shortcut is defined by specifying all keys separated by a plus sign.\nThese are the supported keys:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ALT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"CTRL"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"CMD"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SHIFT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ENTER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"TAB"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SPACE"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"META"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"OPTION"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"INSERT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DOWN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"LEFT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"RIGHT"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"UP"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"END"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"HOME"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"PAGEDOWN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"PAGEUP"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F3"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F4"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F5"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F6"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F7"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F8"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F9"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F10"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F11"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F12"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F13"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F14"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F15"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F16"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F17"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F18"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F19"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F20"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"A"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"C"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"D"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"E"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"F"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"G"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"H"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"I"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"J"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"K"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"L"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"M"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"N"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"O"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"P"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Q"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"R"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"S"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"U"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"V"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"W"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"X"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Y"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Z"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"4"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"5"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"6"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"7"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"8"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"9"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD1"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD2"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD3"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD4"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD5"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD6"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD7"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD8"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NUMPAD9")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Not all keyboard combinations have been tested. If you find a combination that's not working, please open\na bug report on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/cocmd/cocmd/issues"},"GitHub"),". Thanks!")),(0,i.kt)("p",null,"You can also disable this shortcut entirely by adding the following line:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/default.yml"',title:'"$CONFIG/config/default.yml"'},"search_shortcut: off\n")),(0,i.kt)("h3",{id:"customizing-the-search-trigger"},"Customizing the search trigger"),(0,i.kt)("p",null,"The search bar can also be configured to be shown after typing a trigger.\nFor example, you might tune it to be displayed after typing ",(0,i.kt)("inlineCode",{parentName:"p"},".search")," by\nadding this option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/default.yml"',title:'"$CONFIG/config/default.yml"'},'search_trigger: ".search"\n')),(0,i.kt)("p",null,"Or disable it entirely with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/default.yml"',title:'"$CONFIG/config/default.yml"'},"search_trigger: off\n")),(0,i.kt)("h2",{id:"hiding-the-icon"},"Hiding the Icon"),(0,i.kt)("p",null,"You can hide the Cocmd status icon on macOS and Windows by adding the following option to\nyour ",(0,i.kt)("inlineCode",{parentName:"p"},"$CONFIG/config/default.yml")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/default.yml"',title:'"$CONFIG/config/default.yml"'},"show_icon: false\n")),(0,i.kt)("h2",{id:"hiding-the-notifications"},"Hiding the Notifications"),(0,i.kt)("p",null,"You can hide the notifications by adding the following option to your ",(0,i.kt)("inlineCode",{parentName:"p"},"$CONFIG/config/default.yml")," config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="$CONFIG/config/default.yml"',title:'"$CONFIG/config/default.yml"'},"show_notifications: false\n")),(0,i.kt)("h2",{id:"options-reference"},"Options reference"),(0,i.kt)("p",null,"Here's a list of all the available options. If the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"App-specific")," column is ",(0,i.kt)("inlineCode",{parentName:"p"},"Yes"),", then the option\ncan be used inside an ",(0,i.kt)("a",{parentName:"p",href:"../app-specific-configurations"},"App-specific configuration"),".\nOtherwise, the option can only be defined inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"$CONFIG/config/default.yml")," file."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Option"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Possible Values"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"App-Specific"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"backend")),(0,i.kt)("td",{parentName:"tr",align:null},"The mechanism used to perform the injection. Cocmd can either inject text by simulating keypresses (",(0,i.kt)("inlineCode",{parentName:"td"},"Inject")," backend) or by using the clipboard (",(0,i.kt)("inlineCode",{parentName:"td"},"Clipboard")," backend). Both of them have pros and cons, so the ",(0,i.kt)("inlineCode",{parentName:"td"},"Auto")," backend is used by default to automatically choose the most appropriate one based on the situation. If for whatever reason the ",(0,i.kt)("inlineCode",{parentName:"td"},"Auto")," backend is not appropriate, you can change this option to override it."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Clipboard"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"Inject")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"Auto")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Auto")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"enable")),(0,i.kt)("td",{parentName:"tr",align:null},"If false, Cocmd will be disabled for the current configuration. This option can be used to selectively disable cocmd when using a specific application (by creating an app-specific config)."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"toggle_key")),(0,i.kt)("td",{parentName:"tr",align:null},"Defines the key that disables/enables cocmd when double pressed"),(0,i.kt)("td",{parentName:"tr",align:null},"See the ",(0,i.kt)("a",{parentName:"td",href:"#customizing-the-toggle-key"},"customizing the Toggle Key")," section"),(0,i.kt)("td",{parentName:"tr",align:null},"OFF"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"inject_delay")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of milliseconds between text injection events. Increase if the target application is missing some characters."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")," of milliseconds"),(0,i.kt)("td",{parentName:"tr",align:null},"Between 0 and 1, depending on the platform and application."),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"key_delay")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of milliseconds between key injection events. Increase if the target application is missing some key events. For example, increasing might help if the trigger is not deleted completely."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")," of milliseconds"),(0,i.kt)("td",{parentName:"tr",align:null},"Between 0 and 1, depending on platform and application"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"clipboard_threshold")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of chars after which a match is injected with the clipboard backend instead of the default one. This is done for efficiency reasons, as injecting a long match through separate events becomes slow for long strings. This is only relevant if the backend is set to ",(0,i.kt)("inlineCode",{parentName:"td"},"Auto")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:null},"100"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"paste_shortcut")),(0,i.kt)("td",{parentName:"tr",align:null},"Customize the keyboard shortcut used to paste an expansion. This should follow this format: CTRL+SHIFT+V"),(0,i.kt)("td",{parentName:"tr",align:null},"Keys separated by the ",(0,i.kt)("inlineCode",{parentName:"td"},"+")," plus sign. The available keys are defined ",(0,i.kt)("a",{parentName:"td",href:"https://github.com/cocmd/cocmd/blob/283b85818b6cc27f1d545337b99effa847b380eb/cocmd-inject/src/keys.rs#L237-L323"},"here")),(0,i.kt)("td",{parentName:"tr",align:null},"Usually ",(0,i.kt)("inlineCode",{parentName:"td"},"CTRL+V"),", but many built-in patches change this behavior"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"search_shortcut")),(0,i.kt)("td",{parentName:"tr",align:null},"Hotkey used to show the Search UI"),(0,i.kt)("td",{parentName:"tr",align:null},"See the ",(0,i.kt)("a",{parentName:"td",href:"#customizing-the-search-bar"},"Customizing the Search bar")," section"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ALT+Space")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"search_trigger")),(0,i.kt)("td",{parentName:"tr",align:null},"Trigger used to show the Search UI"),(0,i.kt)("td",{parentName:"tr",align:null},"See the ",(0,i.kt)("a",{parentName:"td",href:"#customizing-the-search-bar"},"Customizing the Search bar")," section"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"off")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pre_paste_delay")),(0,i.kt)("td",{parentName:"tr",align:null},'Delay (in ms) that cocmd should wait to trigger the paste shortcut after copying the content in the clipboard. This is needed because if we trigger a "paste" shortcut before the content is actually copied in the clipboard, the operation will fail. If you see previous contents of the clipboard being inserted instead of the correct replacement, increase this value'),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")," of milliseconds"),(0,i.kt)("td",{parentName:"tr",align:null},"300"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"disable_x11_fast_inject")),(0,i.kt)("td",{parentName:"tr",align:null},"NOTE: This is only relevant on Linux under X11 environments. Switch to a slower (but sometimes more supported) way of injecting key events based on XTestFakeKeyEvent instead of XSendEvent. From my experiements, disabling fast inject becomes particularly slow when using the Gnome desktop environment."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"paste_shortcut_event_delay")),(0,i.kt)("td",{parentName:"tr",align:null},"Number of milliseconds between keystrokes when simulating the Paste shortcut. For example: CTRL + (wait 5ms) + V + (wait 5ms) + release V + (wait 5ms) + release CTRL. This is needed as sometimes (for example on macOS), without a delay some keystrokes were not registered correctly."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")," of milliseconds"),(0,i.kt)("td",{parentName:"tr",align:null},"10"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"auto_restart")),(0,i.kt)("td",{parentName:"tr",align:null},"If true, instructs the daemon process to restart the worker (and refresh the configuration) after a configuration file change is detected on disk."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"preserve_clipboard")),(0,i.kt)("td",{parentName:"tr",align:null},"If true, Cocmd will attempt to preserve the previous clipboard content after an expansion has taken place."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"restore_clipboard_delay")),(0,i.kt)("td",{parentName:"tr",align:null},"The number of milliseconds to wait before restoring the previous clipboard content after an expansion. This is needed as without this delay, sometimes the target application detects the previous clipboard content instead of the expansion content."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")," of milliseconds"),(0,i.kt)("td",{parentName:"tr",align:null},"300"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"evdev_modifier_delay")),(0,i.kt)("td",{parentName:"tr",align:null},'Extra delay to apply when injecting modifiers under the EVDEV backend (Wayland). This is useful on Wayland if cocmd is injecting seemingly random cased letters, for example "Hi theRE1" instead of "Hi there!". Increase if necessary, decrease to speed up the injection.'),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")," of milliseconds"),(0,i.kt)("td",{parentName:"tr",align:null},"10"),(0,i.kt)("td",{parentName:"tr",align:null},"Yes (but on Wayland there is currently no support for App-specific configs)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"word_separators")),(0,i.kt)("td",{parentName:"tr",align:null},"Chars that when pressed mark the start and end of a word. Examples of this are . or ,"),(0,i.kt)("td",{parentName:"tr",align:null},"An array of strings"),(0,i.kt)("td",{parentName:"tr",align:null},"`",'[" ", ",", ".", "?", "!", "',"\\",'r", "',"\\",'n", 22]'),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"backspace_limit")),(0,i.kt)("td",{parentName:"tr",align:null},"How many backspace cocmd tracks to correct misspelled keywordsMaximum number of backspace presses cocmd keeps track of. For example, this is needed to correctly expand even if typos are typed."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"apply_patch")),(0,i.kt)("td",{parentName:"tr",align:null},"If false, avoid applying the built-in patches to the current config."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"keyboard_layout")),(0,i.kt)("td",{parentName:"tr",align:null},"On Wayland, overrides the auto-detected keyboard configuration (RMLVO) which is used both for the detection and injection process."),(0,i.kt)("td",{parentName:"tr",align:null},"An object with fields: ",(0,i.kt)("inlineCode",{parentName:"td"},"rules"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"model"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"layout"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"variant")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"options")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{ layout: us }")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"undo_backspace")),(0,i.kt)("td",{parentName:"tr",align:null},'When enabled, cocmd automatically "reverts" an expansion if the user presses the Backspace key afterwards. This is not available on some platform/configurations'),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"show_notifications")),(0,i.kt)("td",{parentName:"tr",align:null},"If false, disable all notifications"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"show_icon")),(0,i.kt)("td",{parentName:"tr",align:null},"If false, avoid showing the cocmd icon on the system's tray bar. Note: currently not working on Linux"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"x11_use_xclip_backend")),(0,i.kt)("td",{parentName:"tr",align:null},"If true, use the ",(0,i.kt)("inlineCode",{parentName:"td"},"xclip")," command to implement the clipboard instead of the built-in native module on X11. You'll need to install the ",(0,i.kt)("inlineCode",{parentName:"td"},"xclip"),' command. Enable if the clipboard "get stuck" for some applications on Linux'),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},"Yes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"win32_exclude_orphan_events")),(0,i.kt)("td",{parentName:"tr",align:null},"If true, filter out keyboard events without an explicit HID device source on Windows. This is needed to filter out the software-generated events, including those from Cocmd, but might need to be disabled when using some software-level keyboards. Disabling this option might conflict with the undo feature."),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true"),"/",(0,i.kt)("inlineCode",{parentName:"td"},"false")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"true")),(0,i.kt)("td",{parentName:"tr",align:null},"No")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"win32_keyboard_layout_cache_interval")),(0,i.kt)("td",{parentName:"tr",align:null},'The maximum interval (in milliseconds) for which a keyboard layout can be cached. If switching often between different layouts, you  could lower this amount to avoid the "lost detection" effect described in this issue: ',(0,i.kt)("a",{parentName:"td",href:"https://github.com/cocmd/cocmd/issues/745"},"https://github.com/cocmd/cocmd/issues/745")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")," of milliseconds"),(0,i.kt)("td",{parentName:"tr",align:null},"2000"),(0,i.kt)("td",{parentName:"tr",align:null},"No")))))}u.isMDXComponent=!0}}]);