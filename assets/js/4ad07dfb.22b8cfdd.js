(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6517],{1410:(e,t,a)=>{const n=a(7694),o=a(3618),i={title:"CoCMD",tagline:"community powered cmd shortcuts and automations",favicon:"img/coding_color.png",url:"https://cocmd.org",baseUrl:"/",organizationName:"cocmd",projectName:"website",onBrokenLinks:"ignore",onBrokenMarkdownLinks:"warn",i18n:{defaultLocale:"en",locales:["en"]},presets:[["classic",{docs:{sidebarPath:6679,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/"},blog:{showReadingTime:!0,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/"},theme:{customCss:2295}}]],customFields:{CURRENT_STABLE_VERSION:"v1.2.3.4",LINUX_X11_APP_IMAGE_DOWNLOAD_URL:"https://github.com/cocmd/cocmd/releases/download/{{{VERSION}}}/Cocmd-X11.AppImage",LINUX_X11_DEB_DOWNLOAD_URL:"https://github.com/cocmd/cocmd/releases/download/{{{VERSION}}}/cocmd-debian-x11-amd64.deb",LINUX_WAYLAND_DEB_DOWNLOAD_URL:"https://github.com/cocmd/cocmd/releases/download/{{{VERSION}}}/cocmd-debian-wayland-amd64.deb",MAC_INTEL_DOWNLOAD_URL:"https://github.com/cocmd/cocmd/releases/download/{{{VERSION}}}/Cocmd-Mac-Intel.zip",MAC_M1_DOWNLOAD_URL:"https://github.com/cocmd/cocmd/releases/download/{{{VERSION}}}/Cocmd-Mac-M1.zip",WIN_INSTALLER_DOWNLOAD_URL:"https://github.com/cocmd/cocmd/releases/download/{{{VERSION}}}/Cocmd-Win-Installer-x86_64.exe",WIN_PORTABLE_DOWNLOAD_URL:"https://github.com/cocmd/cocmd/releases/download/{{{VERSION}}}/Cocmd-Win-Portable-x86_64.zip"},themeConfig:{image:"img/docusaurus-social-card.jpg",colorMode:{disableSwitch:!0},navbar:{title:"CoCMD",logo:{alt:"My Site Logo",src:"img/coding.png"},items:[{to:"/install",sidebarId:"installSidebar",position:"left",label:"Install"},{type:"docSidebar",sidebarId:"tutorialSidebar",position:"left",label:"Docs"},{to:"/blog",label:"Blog",position:"left"},{href:"https://github.com/cocmd/cocmd",label:"GitHub",position:"left"}]},footer:{style:"dark",links:[{title:"Docs",items:[{label:"Tutorial",to:"/docs/intro"}]},{title:"Community",items:[{label:"Stack Overflow",href:"https://stackoverflow.com/questions/tagged/docusaurus"},{label:"Discord",href:"https://discordapp.com/invite/docusaurus"},{label:"Twitter",href:"https://twitter.com/docusaurus"}]},{title:"More",items:[{label:"Blog",to:"/blog"},{label:"GitHub",href:"https://github.com/facebook/docusaurus"}]}],copyright:`Copyright \xa9 ${(new Date).getFullYear()} My Project, Inc. Built with Docusaurus.`},prism:{theme:n,darkTheme:o}}};e.exports=i},6679:e=>{e.exports={tutorialSidebar:[{type:"autogenerated",dirName:"."}]}},1946:(e,t,a)=>{"use strict";a.d(t,{k:()=>l,s:()=>i});var n=a(1410),o=a.n(n);const i=()=>o().customFields.CURRENT_STABLE_VERSION,l=e=>o().customFields[e].replace("{{{VERSION}}}",i())},1686:(e,t,a)=>{"use strict";a.r(t),a.d(t,{AppImageCodeLink:()=>N,DebWaylandCodeLink:()=>f,DebX11CodeLink:()=>b,assets:()=>g,contentTitle:()=>h,default:()=>v,frontMatter:()=>u,metadata:()=>k,toc:()=>y});var n=a(7462),o=(a(7294),a(3905)),i=(a(1410),a(1946)),l=a(614);const r={toc:[]},s="wrapper";function d(e){let{components:t,...a}=e;return(0,o.kt)(s,(0,n.Z)({},r,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"From now on, you should have the ",(0,o.kt)("inlineCode",{parentName:"p"},"cocmd")," command available in the terminal (you can verify by running ",(0,o.kt)("inlineCode",{parentName:"p"},"cocmd --version"),")."),(0,o.kt)("p",null,"At this point, you are ready to use cocmd by registering it first as a Systemd service and then starting it with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Register cocmd as a systemd service (required only once)\ncocmd service register\n\n# Start cocmd\ncocmd start\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you don't want to use cocmd as a Systemd service, you can also start it in unmanaged mode with ",(0,o.kt)("inlineCode",{parentName:"p"},"cocmd start --unmanaged"),". Keep in mind that Cocmd will not start automatically when running in unmanaged mode, so you will need to do so manually.")),(0,o.kt)("p",null,"You are now ready to read the ",(0,o.kt)("a",{parentName:"p",href:"../../get-started"},"Getting Started")," tutorial!"))}d.isMDXComponent=!0;const p={toc:[{value:"Adding the required Capabilities",id:"adding-the-required-capabilities",level:4},{value:"Final steps",id:"final-steps",level:4}]},c="wrapper";function m(e){let{components:t,...a}=e;return(0,o.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h4",{id:"adding-the-required-capabilities"},"Adding the required Capabilities"),(0,o.kt)("p",null,"Cocmd requires access to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/dev/input/eventX")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/dev/uinput")," interfaces to detect triggers and inject expansions respectively.\nAlthough you could run it as root to grant the necessary permissions, Cocmd supports a safer alternative\nthat consists in adding the ",(0,o.kt)("inlineCode",{parentName:"p"},"CAP_DAC_OVERRIDE")," capability to the binary's set of ",(0,o.kt)("strong",{parentName:"p"},"Permitted")," ones. To do so, run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'sudo setcap "cap_dac_override+p" $(which cocmd)\n')),(0,o.kt)("admonition",{title:"Security considerations",type:"info"},(0,o.kt)("p",{parentName:"admonition"}," In a nutshell, this capability grants Cocmd the permissions to read and write to any file in the system, ",(0,o.kt)("strong",{parentName:"p"},"but only when explicitly activated by the binary itself"),"."),(0,o.kt)("p",{parentName:"admonition"}," To limit the attack surface, Cocmd performs the following steps:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When started, the ",(0,o.kt)("inlineCode",{parentName:"p"},"CAP_DAC_OVERRIDE")," capability is contained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Permitted")," set. At this point, ",(0,o.kt)("strong",{parentName:"p"},"Cocmd CANNOT access arbitrary files in the system, as this is only possible once the ",(0,o.kt)("inlineCode",{parentName:"strong"},"CAP_DAC_OVERRIDE")," is moved to the ",(0,o.kt)("inlineCode",{parentName:"strong"},"Effective")," set"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"After a partial initialization of the various modules, Cocmd moves the ",(0,o.kt)("inlineCode",{parentName:"p"},"CAP_DAC_OVERRIDE")," permission to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Effective")," set and opens the necessary interfaces to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/dev/input/eventX")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/dev/uinput")," files.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Immediately after, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Permitted")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Effective")," sets are cleared, meaning Cocmd cannot access privileged files anymore. Moreover, because the ",(0,o.kt)("inlineCode",{parentName:"p"},"Permitted")," set was cleared as well, the process won't be able to grant the permission again."),(0,o.kt)("p",{parentName:"li"},"In short, Cocmd uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"CAP_DAC_OVERRIDE")," permission only when opening the ",(0,o.kt)("inlineCode",{parentName:"p"},"/dev/input*")," interfaces, and ungrant that permission immediately after."),(0,o.kt)("p",{parentName:"li"},"For more information on Linux capabilities, see: ",(0,o.kt)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man7/capabilities.7.html"},"https://man7.org/linux/man-pages/man7/capabilities.7.html"))))),(0,o.kt)("h4",{id:"final-steps"},"Final steps"),(0,o.kt)("p",null,"Now run ",(0,o.kt)("inlineCode",{parentName:"p"},"cocmd --version"),". If you see the version appear, it means Cocmd was successfully installed!"),(0,o.kt)("p",null,"To complete the configuration, run these commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Register cocmd as a systemd service (required only once)\ncocmd service register\n\n# Start cocmd\ncocmd start\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If you don't want to use cocmd as a Systemd service, you can also start it in unmanaged mode with ",(0,o.kt)("inlineCode",{parentName:"p"},"cocmd start --unmanaged"),". Keep in mind that Cocmd will not start automatically when running in unmanaged mode, so you will need to do so manually.")),(0,o.kt)("admonition",{title:"A note for non-US users",type:"caution"},(0,o.kt)("p",{parentName:"admonition"},'If you are using a non-US keyboard layout, you\'ll need to specify its "code" into\nthe ',(0,o.kt)("inlineCode",{parentName:"p"},"$CONFIG/config/default.yml")," file as follows:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# For example, this is what I use for the Italian layout\nkeyboard_layout:\n  layout: "it"\n'))),(0,o.kt)("p",null,"You are now ready to read the ",(0,o.kt)("a",{parentName:"p",href:"../../get-started"},"Getting Started")," tutorial!"))}m.isMDXComponent=!0;const u={title:"Install on Linux",layout:"docs"},h=void 0,k={unversionedId:"install/linux",id:"install/linux",title:"Install on Linux",description:"Find the right version",source:"@site/docs/install/linux.mdx",sourceDirName:"install",slug:"/install/linux",permalink:"/docs/install/linux",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/install/linux.mdx",tags:[],version:"current",frontMatter:{title:"Install on Linux",layout:"docs"},sidebar:"tutorialSidebar",next:{title:"Install on macOS",permalink:"/docs/install/mac"}},g={},y=[{value:"Find the right version",id:"find-the-right-version",level:2},{value:"Choosing the right install method",id:"choosing-the-right-install-method",level:2},{value:"Install on X11",id:"install-on-x11",level:2},{value:"Installing with DEB package (Ubuntu/Debian)",id:"deb-x11",level:3},{value:"Installing with AppImage (all distros)",id:"appimage-x11",level:3},{value:"Installing with Snap",id:"snap-x11",level:3},{value:"Compiling from sources",id:"x11-compile",level:3},{value:"Prerequisites",id:"prerequisites",level:4},{value:"Compiling Cocmd",id:"compiling-cocmd",level:4},{value:"Installing Cocmd",id:"installing-cocmd",level:4},{value:"Install on Wayland",id:"install-on-wayland",level:2},{value:"Installing with DEB package (Ubuntu/Debian)",id:"deb-wayland",level:3},{value:"Compiling from sources",id:"wayland-compile",level:3},{value:"Prerequisites",id:"prerequisites-1",level:4},{value:"Compiling Cocmd",id:"compiling-cocmd-1",level:4},{value:"Installing Cocmd",id:"installing-cocmd-1",level:4}],b=()=>(0,o.kt)(l.Z,{mdxType:"CodeBlock"},"wget ",(0,i.k)("LINUX_X11_DEB_DOWNLOAD_URL")),N=()=>(0,o.kt)(l.Z,{className:"language-bash",mdxType:"CodeBlock"},`# Create the $HOME/opt destination folder\nmkdir -p ~/opt\n# Download the AppImage inside it\nwget -O ~/opt/Cocmd.AppImage '${(0,i.k)("LINUX_X11_APP_IMAGE_DOWNLOAD_URL")}'\n# Make it executable\nchmod u+x ~/opt/Cocmd.AppImage\n# Create the "cocmd" command alias\nsudo ~/opt/Cocmd.AppImage env-path register\n`),f=()=>(0,o.kt)(l.Z,{mdxType:"CodeBlock"},"wget ",(0,i.k)("LINUX_WAYLAND_DEB_DOWNLOAD_URL")),C={toc:y,DebX11CodeLink:b,AppImageCodeLink:N,DebWaylandCodeLink:f},w="wrapper";function v(e){let{components:t,...a}=e;return(0,o.kt)(w,(0,n.Z)({},C,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"find-the-right-version"},"Find the right version"),(0,o.kt)("p",null,"To use Cocmd on Linux, you first need to determine whether your system is running a X11 or Wayland desktop environment.\nIf you are unsure, please open a terminal and run the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"echo $XDG_SESSION_TYPE\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"If the above command doesn't output anything, please try ",(0,o.kt)("a",{parentName:"p",href:"https://unix.stackexchange.com/a/325972"},"with this method"),".")),(0,o.kt)("p",null,"Now that you know your desktop environment, you're ready to choose the right method in the following section."),(0,o.kt)("h2",{id:"choosing-the-right-install-method"},"Choosing the right install method"),(0,o.kt)("p",null,"There are multiple installation methods on Linux.\nThis table summarizes them based on distribution and desktop environment:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Distribution"),(0,o.kt)("th",{parentName:"tr",align:null},"X11"),(0,o.kt)("th",{parentName:"tr",align:null},"Wayland"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Ubuntu/Debian"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"#deb-x11"},"DEB package")," (recommended)"),", ",(0,o.kt)("a",{parentName:"td",href:"#appimage-x11"},"AppImage"),", ",(0,o.kt)("a",{parentName:"td",href:"#snap-x11"},"Snap package"),", ",(0,o.kt)("a",{parentName:"td",href:"#x11-compile"},"Manual compilation")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"#deb-wayland"},"DEB package")," (recommended)"),", ",(0,o.kt)("a",{parentName:"td",href:"#wayland-compile"},"Manual compilation"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Fedora"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"#appimage-x11"},"AppImage")," (recommended)"),", ",(0,o.kt)("a",{parentName:"td",href:"#x11-compile"},"Manual compilation")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#wayland-compile"},"Manual compilation"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Arch/Manjaro"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"#appimage-x11"},"AppImage")," (recommended)"),", ",(0,o.kt)("a",{parentName:"td",href:"#x11-compile"},"Manual compilation")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#wayland-compile"},"Manual compilation"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Other distros"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"td"},(0,o.kt)("a",{parentName:"strong",href:"#appimage-x11"},"AppImage")," (recommended)"),", ",(0,o.kt)("a",{parentName:"td",href:"#x11-compile"},"Manual compilation")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#wayland-compile"},"Manual compilation"))))),(0,o.kt)("p",null,"We are continously improving the installation process, so expect more user-friendly methods soon."),(0,o.kt)("h2",{id:"install-on-x11"},"Install on X11"),(0,o.kt)("h3",{id:"deb-x11"},"Installing with DEB package (Ubuntu/Debian)"),(0,o.kt)("p",null,"Cocmd ships with a ",(0,o.kt)("inlineCode",{parentName:"p"},".deb")," package, making the installation convenient on Debian-based systems."),(0,o.kt)("p",null,"Start by downloading the package by running the following command inside a terminal:"),(0,o.kt)(b,{mdxType:"DebX11CodeLink"}),(0,o.kt)("admonition",{title:"Verifying package checksum",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you want to verify the correctness of the archive, in the Github Releases page you will find the SHA256 hash\nin the file ",(0,o.kt)("inlineCode",{parentName:"p"},"cocmd-debian-x11-amd64-sha256.txt"))),(0,o.kt)("p",null,"You can now install the package using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo apt install ./cocmd-debian-x11-amd64.deb\n")),(0,o.kt)(d,{mdxType:"X11AfterInstall"}),(0,o.kt)("h3",{id:"appimage-x11"},"Installing with AppImage (all distros)"),(0,o.kt)("p",null,"To install the Cocmd's AppImage, open a terminal and follow these steps:"),(0,o.kt)(N,{mdxType:"AppImageCodeLink"}),(0,o.kt)(d,{mdxType:"X11AfterInstall"}),(0,o.kt)("h3",{id:"snap-x11"},"Installing with Snap"),(0,o.kt)("p",null,"If you are using Ubuntu, you can also install Cocmd by simply running this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sudo snap install cocmd --classic --channel=latest/edge\n")),(0,o.kt)(d,{mdxType:"X11AfterInstall"}),(0,o.kt)("h3",{id:"x11-compile"},"Compiling from sources"),(0,o.kt)("h4",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"These are the basic tools required to build cocmd:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A recent Rust compiler. You can install it following these instructions: ",(0,o.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/tools/install"},"https://www.rust-lang.org/tools/install"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A C/C++ compiler. On Linux, you should use the default C/C++ compiler (it's usually GCC).\nIf you run the command specified in the next step, this will be included automatically.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Install the required linux packages:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"On ",(0,o.kt)("strong",{parentName:"li"},"Ubuntu/Debian")," run ",(0,o.kt)("inlineCode",{parentName:"li"},"sudo apt update && sudo apt install build-essential git libx11-dev libxtst-dev libxkbcommon-dev libdbus-1-dev libwxgtk3.0-gtk3-dev libssl-dev")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Cocmd heavily relies on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sagiegurari/cargo-make"},"cargo make")," for the various packaging\nsteps. You can install it by running:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo install --force cargo-make --version 0.34.0\n")),(0,o.kt)("h4",{id:"compiling-cocmd"},"Compiling Cocmd"),(0,o.kt)("p",null,"Once you've got all the prerequisites, you can:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Clone the Cocmd repository\ngit clone https://github.com/cocmd/cocmd\n\ncd cocmd\n\n# Compile cocmd in release mode\n# NOTE: this will take a while (~5/15 minutes)\ncargo make --profile release build-binary \n")),(0,o.kt)("p",null,"At this point, you should have the ",(0,o.kt)("inlineCode",{parentName:"p"},"cocmd")," binary available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"target/release/")," directory."),(0,o.kt)("h4",{id:"installing-cocmd"},"Installing Cocmd"),(0,o.kt)("p",null,"Once you've compiled Cocmd, you can move it into the final location. A good option would be the ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo mv target/release/cocmd /usr/local/bin/cocmd\n")),(0,o.kt)(d,{mdxType:"X11AfterInstall"}),(0,o.kt)("h2",{id:"install-on-wayland"},"Install on Wayland"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Wayland support is currently experimental, therefore some features might be missing or not working well yet.\nKnown limitations include:"),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"If you are using a non-us keyboard layout, you'll need to explicitly specify it in the settings (more on this below)."),(0,o.kt)("li",{parentName:"ul"},"There is currently no support for App-specific configurations, which means we can't use patches\n(which are often necessary to support some terminals)."),(0,o.kt)("li",{parentName:"ul"},'If you are using Gnome, Cocmd causes a small "flicker" when using the clipboard backend. This does not happen\non Sway.'),(0,o.kt)("li",{parentName:"ul"},"If you connect a new keyboard, you will need to manually restart Cocmd with ",(0,o.kt)("inlineCode",{parentName:"li"},"cocmd restart"),", otherwise\nCocmd won't detect it.")),(0,o.kt)("p",{parentName:"blockquote"},"If you encounter a bug, please ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cocmd/cocmd/issues"},"open an issue on GitHub"),",\nany help is greatly appreciated! :)")),(0,o.kt)("h3",{id:"deb-wayland"},"Installing with DEB package (Ubuntu/Debian)"),(0,o.kt)("p",null,"Cocmd ships with a ",(0,o.kt)("inlineCode",{parentName:"p"},".deb")," package, making the installation convenient on Debian-based systems."),(0,o.kt)("p",null,"Start by downloading the package by running the following command inside a terminal:"),(0,o.kt)(f,{mdxType:"DebWaylandCodeLink"}),(0,o.kt)("admonition",{title:"Verifying package checksum",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you want to verify the correctness of the archive, in the Github Releases page you will find the SHA256 hash\nin the file ",(0,o.kt)("inlineCode",{parentName:"p"},"cocmd-debian-wayland-amd64-sha256.txt"))),(0,o.kt)("p",null,"You can now install the package using:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo apt install ./cocmd-debian-wayland-amd64.deb\n")),(0,o.kt)("p",null,"The process is almost complete, you just need to grant the required capabilities."),(0,o.kt)(m,{mdxType:"WaylandFinalSteps"}),(0,o.kt)("h3",{id:"wayland-compile"},"Compiling from sources"),(0,o.kt)("h4",{id:"prerequisites-1"},"Prerequisites"),(0,o.kt)("p",null,"These are the basic tools required to build cocmd:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A recent Rust compiler. You can install it following these instructions: ",(0,o.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/tools/install"},"https://www.rust-lang.org/tools/install"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A C/C++ compiler. On Linux, you should use the default C/C++ compiler (it's usually GCC).\nIf you run the command specified in the next step, this will be included automatically.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Install the required linux packages:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"On ",(0,o.kt)("strong",{parentName:"li"},"Ubuntu/Debian")," run ",(0,o.kt)("inlineCode",{parentName:"li"},"sudo apt update && sudo apt install build-essential git wl-clipboard libxkbcommon-dev libdbus-1-dev libwxgtk3.0-gtk3-dev libssl-dev")),(0,o.kt)("li",{parentName:"ul"},"On ",(0,o.kt)("strong",{parentName:"li"},"Fedora")," run ",(0,o.kt)("inlineCode",{parentName:"li"},"sudo dnf install @development-tools gcc-c++ wl-clipboard libxkbcommon-devel dbus-devel wxGTK3-devel")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Cocmd heavily relies on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/sagiegurari/cargo-make"},"cargo make")," for the various packaging\nsteps. You can install it by running:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cargo install --force cargo-make --version 0.34.0\n")),(0,o.kt)("h4",{id:"compiling-cocmd-1"},"Compiling Cocmd"),(0,o.kt)("p",null,"Once you've got all the prerequisites, you can:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Clone the Cocmd repository\ngit clone https://github.com/cocmd/cocmd\n\ncd cocmd\n\n# Compile cocmd in release mode\n# NOTE: this will take a while (~5/15 minutes)\ncargo make --profile release --env NO_X11=true build-binary \n")),(0,o.kt)("p",null,"At this point, you should have the ",(0,o.kt)("inlineCode",{parentName:"p"},"cocmd")," binary available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"target/release/")," directory."),(0,o.kt)("h4",{id:"installing-cocmd-1"},"Installing Cocmd"),(0,o.kt)("p",null,"Once you've compiled Cocmd, you can move it into the final location.\nA good option would be the ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/local/bin")," folder:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo mv target/release/cocmd /usr/local/bin/cocmd\n")),(0,o.kt)("p",null,"The process is almost complete, you just need to grant the required capabilities."),(0,o.kt)(m,{mdxType:"WaylandFinalSteps"}))}v.isMDXComponent=!0},3618:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>n});const n={plain:{color:"#F8F8F2",backgroundColor:"#282A36"},styles:[{types:["prolog","constant","builtin"],style:{color:"rgb(189, 147, 249)"}},{types:["inserted","function"],style:{color:"rgb(80, 250, 123)"}},{types:["deleted"],style:{color:"rgb(255, 85, 85)"}},{types:["changed"],style:{color:"rgb(255, 184, 108)"}},{types:["punctuation","symbol"],style:{color:"rgb(248, 248, 242)"}},{types:["string","char","tag","selector"],style:{color:"rgb(255, 121, 198)"}},{types:["keyword","variable"],style:{color:"rgb(189, 147, 249)",fontStyle:"italic"}},{types:["comment"],style:{color:"rgb(98, 114, 164)"}},{types:["attr-name"],style:{color:"rgb(241, 250, 140)"}}]}},7694:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>n});const n={plain:{color:"#393A34",backgroundColor:"#f6f8fa"},styles:[{types:["comment","prolog","doctype","cdata"],style:{color:"#999988",fontStyle:"italic"}},{types:["namespace"],style:{opacity:.7}},{types:["string","attr-value"],style:{color:"#e3116c"}},{types:["punctuation","operator"],style:{color:"#393A34"}},{types:["entity","url","symbol","number","boolean","variable","constant","property","regex","inserted"],style:{color:"#36acaa"}},{types:["atrule","keyword","attr-name","selector"],style:{color:"#00a4db"}},{types:["function","deleted","tag"],style:{color:"#d73a49"}},{types:["function-variable"],style:{color:"#6f42c1"}},{types:["tag","selector","keyword"],style:{color:"#00009f"}}]}}}]);