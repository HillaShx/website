"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2610],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,h=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1523:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1,title:"Daily Routines"},i=void 0,s={unversionedId:"showcase/routines",id:"showcase/routines",title:"Daily Routines",description:"Usually, every team has a set of routines and procedures that are executed on a regular basis.",source:"@site/docs/showcase/routines.md",sourceDirName:"showcase",slug:"/showcase/routines",permalink:"/docs/showcase/routines",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/showcase/routines.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Daily Routines"},sidebar:"tutorialSidebar",previous:{title:"New Hire Onboarding",permalink:"/docs/showcase/onboarding"},next:{title:"CMDOps for your projects",permalink:"/docs/showcase/cmdops"}},l={},c=[{value:"What is happening today?",id:"what-is-happening-today",level:2},{value:"What can we do better?",id:"what-can-we-do-better",level:2},{value:"How to create a routines package?",id:"how-to-create-a-routines-package",level:2},{value:"How to run the routines package?",id:"how-to-run-the-routines-package",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,'Usually, every team has a set of routines and procedures that are executed on a regular basis.\nThis can also be called "playbooks" or "runbooks". '),(0,r.kt)("p",null,"CoCMD can help you automate these routines and make them available to your team."),(0,r.kt)("h2",{id:"what-is-happening-today"},"What is happening today?"),(0,r.kt)("p",null,"Today, these routines are usually documented in a wiki or a confluence page.\nThe team members need to read the documentation and execute the steps manually."),(0,r.kt)("p",null,"What is wrong with that?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"New employee will need to read the documentation and may miss some steps."),(0,r.kt)("li",{parentName:"ol"},"When things change, the documentation is not updated and the team members are not aware of the changes.")),(0,r.kt)("h2",{id:"what-can-we-do-better"},"What can we do better?"),(0,r.kt)("p",null,"Use CoCMD. CoCMD is a tool for keeping Command line shortcuts, sequences and knowhows ",(0,r.kt)("strong",{parentName:"p"}," AS CODE "),". This means that you can easily share your knowledge with your team and community. And ofcourse, create your ",(0,r.kt)("strong",{parentName:"p"}," routines ")," package and share it with your team."),(0,r.kt)("h2",{id:"how-to-create-a-routines-package"},"How to create a routines package?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a new directory 'routines' in a a company's private github repo."),(0,r.kt)("li",{parentName:"ol"},"Under that directory, create a ",(0,r.kt)("inlineCode",{parentName:"li"},"cocmd.yaml")," file."),(0,r.kt)("li",{parentName:"ol"},"Add the following content to the ",(0,r.kt)("inlineCode",{parentName:"li"},"cocmd.yaml")," file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'name: routines\nautomations:\n    -   name: prod-rollback\n        content: \n            description: rollback a microservice in prod\n            params: \n            - name: jenkins_url\n                save: true\n            - name: jenkins_user\n                save: true\n            - name: jenkins_pass\n                save: true\n            - name: microservice_to_rollback\n                save: false\n            steps:\n            - runner: shell\n                title: rollback\n                approval_message: "Are you sure you want to rollback {{microservice_to_rollback}}?"\n                content: |\n                jenkins-run-build.sh "{{jenkins_url}}" "csp_rollback_{{microservice_to_rollback}}" "{{jenkins_user}}" "{{jenkins_pass}}"\n            - runner: shell\n                title: test deploy\n                content: |\n                jenkins-run-build.sh "{{jenkins_url}}" "csp_rollback_{{microservice_to_rollback}}_test" "{{jenkins_user}}" "{{jenkins_pass}}"\n\n    - name: cleanup\n      content: \n        description:  cleanup local system\n        steps:\n        - content: |\n            # cleanup old docker images\n            docker image prune -a -f\n            # cleanup old docker volumes\n            docker volume prune -f\n            # cleanup old docker networks\n            docker network prune -f\n\n            # empty trash\n            rm -rf ~/.Trash/*\n\n          runner: shell\n          title: cleanup local system\n\n    - name: oncall\n      content: \n        description: daily oncall routine\n        params: \n        - name: jenkins_url\n          save: true\n        - name: jenkins_user\n          save: true\n        - name: jenkins_pass\n          save: true\n        - name: kubectx_username\n          save: true\n        steps:\n        - content: jenkins-lastbuild-check.sh "{{jenkins_url}}" "automation_tests" "{{jenkins_user}}" "{{jenkins_pass}}"\n          runner: shell\n          title: check failed automation tests\n        - content: prometheus-checks.sh prd\n          runner: shell\n          title: check metrics in prd\n        - content: |\n            kubectx prd\n            check-pods-restarts.sh prd\n            check-mem-requirements.sh prd\n            check-api-stats.sh prd\n          runner: shell\n          title: check infra in prd\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"Commit and push the changes to the repo. For this tutorial, we will call it ",(0,r.kt)("inlineCode",{parentName:"li"},"github.com/acme/routines"))),(0,r.kt)("h2",{id:"how-to-run-the-routines-package"},"How to run the routines package?"),(0,r.kt)("p",null,"Every Developer in the team will run the following command in the terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cocmd install git@github.com/acme/routines.git\n")),(0,r.kt)("p",null,"Now, every developer in the team will have the following automations available as commands in their terminal:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"routines.prod-rollback")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"routines.cleanup")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"routines.oncall"))),(0,r.kt)("admonition",{title:"How is that better from writing plain scripts / documentation? ",type:"info"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Using CoCMD, you can easily share your routines with your team. "),(0,r.kt)("li",{parentName:"ul"},"The Command line will get updated automatically when you update the package."),(0,r.kt)("li",{parentName:"ul"},"Less work for you to explain where to get information."))))}m.isMDXComponent=!0}}]);